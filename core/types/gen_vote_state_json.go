// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/clearmatics/autonity/common"
)

// MarshalJSON marshals as JSON.
func (v VoteState) MarshalJSON() ([]byte, error) {
	type VoteState struct {
		Value            common.Hash `json:"value"            gencodec:"required"`
		ProposalVerified bool        `json:"proposalVerified" gencodec:"required"`
		VotePower        uint64      `json:"votePower"        gencodec:"required"`
	}
	var enc VoteState
	enc.Value = v.Value
	enc.ProposalVerified = v.ProposalVerified
	enc.VotePower = v.VotePower
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (v *VoteState) UnmarshalJSON(input []byte) error {
	type VoteState struct {
		Value            *common.Hash `json:"value"            gencodec:"required"`
		ProposalVerified *bool        `json:"proposalVerified" gencodec:"required"`
		VotePower        *uint64      `json:"votePower"        gencodec:"required"`
	}
	var dec VoteState
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Value == nil {
		return errors.New("missing required field 'value' for VoteState")
	}
	v.Value = *dec.Value
	if dec.ProposalVerified == nil {
		return errors.New("missing required field 'proposalVerified' for VoteState")
	}
	v.ProposalVerified = *dec.ProposalVerified
	if dec.VotePower == nil {
		return errors.New("missing required field 'votePower' for VoteState")
	}
	v.VotePower = *dec.VotePower
	return nil
}

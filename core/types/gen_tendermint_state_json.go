// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/clearmatics/autonity/common"
)

// MarshalJSON marshals as JSON.
func (t TendermintState) MarshalJSON() ([]byte, error) {
	type TendermintState struct {
		Code                  int64          `json:"code" gencodec:"required"`
		Client                common.Address `json:"client"                gencodec:"required"`
		Height                big.Int        `json:"height"                gencodec:"required"`
		Round                 int64          `json:"round"                 gencodec:"required"`
		Step                  uint64         `json:"step"                  gencodec:"required"`
		Proposal              common.Hash    `json:"proposal"              gencodec:"required"`
		LockedValue           common.Hash    `json:"lockedValue"           gencodec:"required"`
		LockedRound           int64          `json:"lockedRound"           gencodec:"required"`
		ValidValue            common.Hash    `json:"validValue"            gencodec:"required"`
		ValidRound            int64          `json:"validRound"            gencodec:"required"`
		ParentCommittee       Committee      `json:"parentCommittee"       gencodec:"required"`
		Committee             Committee      `json:"committee"             gencodec:"required"`
		Proposer              common.Address `json:"proposer"              gencodec:"required"`
		IsProposer            bool           `json:"isProposer"            gencodec:"required"`
		QuorumVotePower       uint64         `json:"quorumVotePower"       gencodec:"required"`
		RoundStates           []RoundState   `json:"roundStates"           gencodec:"required"`
		ProposerPolicy        uint64         `json:"proposerPolicy"        gencodec:"required"`
		SentProposal          bool           `json:"sentProposal"          gencodec:"required"`
		SentPrevote           bool           `json:"sentPrevote"           gencodec:"required"`
		SentPrecommit         bool           `json:"sentPrecommit"         gencodec:"required"`
		SetValidRoundAndValue bool           `json:"setValidRoundAndValue" gencodec:"required"`
		BlockPeriod           uint64         `json:"blockPeriod"           gencodec:"required"`
		ProposeTimerStarted   bool           `json:"proposeTimerStarted"   gencodec:"required"`
		PrevoteTimerStarted   bool           `json:"prevoteTimerStarted"   gencodec:"required"`
		PrecommitTimerStarted bool           `json:"precommitTimerStared"  gencodec:"required"`
		CurHeightMessages     []string       `json:"CurHeightMessages"     gencodec:"required"`
		KnownMsgHash          []common.Hash  `json:"KnownMsgHash"          gencodec:"required"`
	}
	var enc TendermintState
	enc.Code = t.Code
	enc.Client = t.Client
	enc.Height = t.Height
	enc.Round = t.Round
	enc.Step = t.Step
	enc.Proposal = t.Proposal
	enc.LockedValue = t.LockedValue
	enc.LockedRound = t.LockedRound
	enc.ValidValue = t.ValidValue
	enc.ValidRound = t.ValidRound
	enc.ParentCommittee = t.ParentCommittee
	enc.Committee = t.Committee
	enc.Proposer = t.Proposer
	enc.IsProposer = t.IsProposer
	enc.QuorumVotePower = t.QuorumVotePower
	enc.RoundStates = t.RoundStates
	enc.ProposerPolicy = t.ProposerPolicy
	enc.SentProposal = t.SentProposal
	enc.SentPrevote = t.SentPrevote
	enc.SentPrecommit = t.SentPrecommit
	enc.SetValidRoundAndValue = t.SetValidRoundAndValue
	enc.BlockPeriod = t.BlockPeriod
	enc.ProposeTimerStarted = t.ProposeTimerStarted
	enc.PrevoteTimerStarted = t.PrevoteTimerStarted
	enc.PrecommitTimerStarted = t.PrecommitTimerStarted
	enc.CurHeightMessages = t.CurHeightMessages
	enc.KnownMsgHash = t.KnownMsgHash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *TendermintState) UnmarshalJSON(input []byte) error {
	type TendermintState struct {
		Code                  *int64          `json:"code" gencodec:"required"`
		Client                *common.Address `json:"client"                gencodec:"required"`
		Height                *big.Int        `json:"height"                gencodec:"required"`
		Round                 *int64          `json:"round"                 gencodec:"required"`
		Step                  *uint64         `json:"step"                  gencodec:"required"`
		Proposal              *common.Hash    `json:"proposal"              gencodec:"required"`
		LockedValue           *common.Hash    `json:"lockedValue"           gencodec:"required"`
		LockedRound           *int64          `json:"lockedRound"           gencodec:"required"`
		ValidValue            *common.Hash    `json:"validValue"            gencodec:"required"`
		ValidRound            *int64          `json:"validRound"            gencodec:"required"`
		ParentCommittee       *Committee      `json:"parentCommittee"       gencodec:"required"`
		Committee             *Committee      `json:"committee"             gencodec:"required"`
		Proposer              *common.Address `json:"proposer"              gencodec:"required"`
		IsProposer            *bool           `json:"isProposer"            gencodec:"required"`
		QuorumVotePower       *uint64         `json:"quorumVotePower"       gencodec:"required"`
		RoundStates           []RoundState    `json:"roundStates"           gencodec:"required"`
		ProposerPolicy        *uint64         `json:"proposerPolicy"        gencodec:"required"`
		SentProposal          *bool           `json:"sentProposal"          gencodec:"required"`
		SentPrevote           *bool           `json:"sentPrevote"           gencodec:"required"`
		SentPrecommit         *bool           `json:"sentPrecommit"         gencodec:"required"`
		SetValidRoundAndValue *bool           `json:"setValidRoundAndValue" gencodec:"required"`
		BlockPeriod           *uint64         `json:"blockPeriod"           gencodec:"required"`
		ProposeTimerStarted   *bool           `json:"proposeTimerStarted"   gencodec:"required"`
		PrevoteTimerStarted   *bool           `json:"prevoteTimerStarted"   gencodec:"required"`
		PrecommitTimerStarted *bool           `json:"precommitTimerStared"  gencodec:"required"`
		CurHeightMessages     []string        `json:"CurHeightMessages"     gencodec:"required"`
		KnownMsgHash          []common.Hash   `json:"KnownMsgHash"          gencodec:"required"`
	}
	var dec TendermintState
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Code == nil {
		return errors.New("missing required field 'code' for TendermintState")
	}
	t.Code = *dec.Code
	if dec.Client == nil {
		return errors.New("missing required field 'client' for TendermintState")
	}
	t.Client = *dec.Client
	if dec.Height == nil {
		return errors.New("missing required field 'height' for TendermintState")
	}
	t.Height = *dec.Height
	if dec.Round == nil {
		return errors.New("missing required field 'round' for TendermintState")
	}
	t.Round = *dec.Round
	if dec.Step == nil {
		return errors.New("missing required field 'step' for TendermintState")
	}
	t.Step = *dec.Step
	if dec.Proposal == nil {
		return errors.New("missing required field 'proposal' for TendermintState")
	}
	t.Proposal = *dec.Proposal
	if dec.LockedValue == nil {
		return errors.New("missing required field 'lockedValue' for TendermintState")
	}
	t.LockedValue = *dec.LockedValue
	if dec.LockedRound == nil {
		return errors.New("missing required field 'lockedRound' for TendermintState")
	}
	t.LockedRound = *dec.LockedRound
	if dec.ValidValue == nil {
		return errors.New("missing required field 'validValue' for TendermintState")
	}
	t.ValidValue = *dec.ValidValue
	if dec.ValidRound == nil {
		return errors.New("missing required field 'validRound' for TendermintState")
	}
	t.ValidRound = *dec.ValidRound
	if dec.ParentCommittee == nil {
		return errors.New("missing required field 'parentCommittee' for TendermintState")
	}
	t.ParentCommittee = *dec.ParentCommittee
	if dec.Committee == nil {
		return errors.New("missing required field 'committee' for TendermintState")
	}
	t.Committee = *dec.Committee
	if dec.Proposer == nil {
		return errors.New("missing required field 'proposer' for TendermintState")
	}
	t.Proposer = *dec.Proposer
	if dec.IsProposer == nil {
		return errors.New("missing required field 'isProposer' for TendermintState")
	}
	t.IsProposer = *dec.IsProposer
	if dec.QuorumVotePower == nil {
		return errors.New("missing required field 'quorumVotePower' for TendermintState")
	}
	t.QuorumVotePower = *dec.QuorumVotePower
	if dec.RoundStates == nil {
		return errors.New("missing required field 'roundStates' for TendermintState")
	}
	t.RoundStates = dec.RoundStates
	if dec.ProposerPolicy == nil {
		return errors.New("missing required field 'proposerPolicy' for TendermintState")
	}
	t.ProposerPolicy = *dec.ProposerPolicy
	if dec.SentProposal == nil {
		return errors.New("missing required field 'sentProposal' for TendermintState")
	}
	t.SentProposal = *dec.SentProposal
	if dec.SentPrevote == nil {
		return errors.New("missing required field 'sentPrevote' for TendermintState")
	}
	t.SentPrevote = *dec.SentPrevote
	if dec.SentPrecommit == nil {
		return errors.New("missing required field 'sentPrecommit' for TendermintState")
	}
	t.SentPrecommit = *dec.SentPrecommit
	if dec.SetValidRoundAndValue == nil {
		return errors.New("missing required field 'setValidRoundAndValue' for TendermintState")
	}
	t.SetValidRoundAndValue = *dec.SetValidRoundAndValue
	if dec.BlockPeriod == nil {
		return errors.New("missing required field 'blockPeriod' for TendermintState")
	}
	t.BlockPeriod = *dec.BlockPeriod
	if dec.ProposeTimerStarted == nil {
		return errors.New("missing required field 'proposeTimerStarted' for TendermintState")
	}
	t.ProposeTimerStarted = *dec.ProposeTimerStarted
	if dec.PrevoteTimerStarted == nil {
		return errors.New("missing required field 'prevoteTimerStarted' for TendermintState")
	}
	t.PrevoteTimerStarted = *dec.PrevoteTimerStarted
	if dec.PrecommitTimerStarted == nil {
		return errors.New("missing required field 'precommitTimerStared' for TendermintState")
	}
	t.PrecommitTimerStarted = *dec.PrecommitTimerStarted
	if dec.CurHeightMessages == nil {
		return errors.New("missing required field 'CurHeightMessages' for TendermintState")
	}
	t.CurHeightMessages = dec.CurHeightMessages
	if dec.KnownMsgHash == nil {
		return errors.New("missing required field 'KnownMsgHash' for TendermintState")
	}
	t.KnownMsgHash = dec.KnownMsgHash
	return nil
}

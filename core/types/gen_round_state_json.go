// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/clearmatics/autonity/common"
)

// MarshalJSON marshals as JSON.
func (r RoundState) MarshalJSON() ([]byte, error) {
	type RoundState struct {
		Round          int64       `json:"round"          gencodec:"required"`
		Proposal       common.Hash `json:"proposal"       gencodec:"required"`
		PrevoteState   []VoteState `json:"prevoteState"   gencodec:"required"`
		PrecommitState []VoteState `json:"precommitState" gencodec:"required"`
	}
	var enc RoundState
	enc.Round = r.Round
	enc.Proposal = r.Proposal
	enc.PrevoteState = r.PrevoteState
	enc.PrecommitState = r.PrecommitState
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *RoundState) UnmarshalJSON(input []byte) error {
	type RoundState struct {
		Round          *int64       `json:"round"          gencodec:"required"`
		Proposal       *common.Hash `json:"proposal"       gencodec:"required"`
		PrevoteState   []VoteState  `json:"prevoteState"   gencodec:"required"`
		PrecommitState []VoteState  `json:"precommitState" gencodec:"required"`
	}
	var dec RoundState
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Round == nil {
		return errors.New("missing required field 'round' for RoundState")
	}
	r.Round = *dec.Round
	if dec.Proposal == nil {
		return errors.New("missing required field 'proposal' for RoundState")
	}
	r.Proposal = *dec.Proposal
	if dec.PrevoteState == nil {
		return errors.New("missing required field 'prevoteState' for RoundState")
	}
	r.PrevoteState = dec.PrevoteState
	if dec.PrecommitState == nil {
		return errors.New("missing required field 'precommitState' for RoundState")
	}
	r.PrecommitState = dec.PrecommitState
	return nil
}

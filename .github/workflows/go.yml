name: Go
on:
  push:
  # workflow_dispatch adds a manual trigger button in the github UI that allows
  # you to trigger builds on specific branches when you are in the page for
  # this workflow.
  workflow_dispatch:
  # pull_request triggers this workflow on both internal and forked pull
  # requests.
  pull_request:

env:
  # We don't have access to the HOME environment variable here since we are not
  # inside a runner at this point, so we just have to hardcode '/home/runner',
  # if we instead defined these environment variables when we did have access
  # to HOME we would need to define them for each job, which would defeat the
  # purpose of defining them here.
  GO_CACHE: /home/runner/.cache/go-build # This is the location of the go build cache.
  GO_MODULES_CACHE: /home/runner/go/pkg # This is where module source code is stored.

jobs:

  # prepare-cache fills the gocache with the source code for all modules and
  # attempts to fill the build cache with as much as possible intermediately
  # compiled source. Most other jobs depend on this job and so this serves to
  # speed up all other jobs. Since the cache only changes when the go modules
  # change, actually filling the cache happens quite infrequently. So most runs
  # should not be impacted by the time taken to fill the cache.
  prepare-cache:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.15

      - uses: actions/checkout@v2

      - name: Go cache
        uses: actions/cache@v2
        id: gocache
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ hashFiles('go.mod', 'go.sum') }}

        # We want to make sure that we download all the modules and compile
        # everything that may be needed so that they fill the go modules cache
        # and go-build dir.
      - name: Fill cache
        if:  steps.gocache.outputs.cache-hit != 'true'
        run: |
          go mod download -x
          make embed-autonity-contract
          go build ./...
          make autonity
          go test -c ./consensus/test
          go test -c ./eth

  # tests runs most of the tests for the project, we use a matrix to run multiple configurations.
  tests:
    needs: prepare-cache
    runs-on: ubuntu-latest
    env:
      # helps prevent '[failed to restore the stack]' messages when race detected.
      GORACE: "history_size=7"
    strategy:
      matrix:
        # Here we set up a matrix to control our tests, we use go list and
        # negative grep to get most of the test packages for the main tests
        # excluding packages of particular interest. The excluded package are
        # those that are slow to test, our e2e tests and tendermint core.
        tests: [[main, $(go list ./... | grep -E -v "/les|/p2p|/eth|/consensus/tendermint|/consensus/test")],
                [slow, ./les/... ./p2p/... ./eth/...],
                [tendermint, ./consensus/tendermint/... -timeout 5m -race],
                [e2e, ./consensus/test/... -v]]

    name: ${{ matrix.tests[0] }}

    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13

      - uses: actions/checkout@v2

        # Required for compilation
      - name: Embed Autonity contract
        run: make embed-autonity-contract

      - name: Go cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Run tests
        run: go test ${{ matrix.tests[1] }}

  # tendermint-coverage runs the tendermint tests and collects the coverage, it
  # can't be part of the matrix tests since we need to use the codecov action,
  # which we do not want to use for the rest of the codebase.
  tendermint-coverage:
    needs: prepare-cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.15

      - uses: actions/checkout@v2

        # Required for compilation
      - name: Embed Autonity contract
        run: make embed-autonity-contract

      - name: Go cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Run coverage
        run: go test ./consensus/tendermint/... -timeout 5m -cover -covermode=atomic -test.coverprofile=coverage_tendermint.out

      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.codecov_upload }}
          file: coverage_tendermint.out
          yml: codecov.yml

  # lint does linting.
  lint:
    needs: prepare-cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.15

      - uses: actions/checkout@v2

      - name: Embed Autonity contract
        run: make embed-autonity-contract

      - name: Go cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Linters
        run: |
          git fetch -fu --no-tags --depth=2 origin develop:develop
          make lint-ci
        shell: bash

  # contract-tests runs our suite of truffle tests against the autonity
  # contract.
  contract-tests:
    runs-on: ubuntu-latest
    needs: prepare-cache
    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: '10.19.0'

      - uses: actions/checkout@v2

      - name: Go cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Build
        run: make autonity

      - name: test contract
        run: make test-contracts

  # docker-e2e-test runs the docker e2e test, it only runs on merges to the
  # develop branch because it takes hours to complete and so is not feasible to
  # run during normal development.
  docker-e2e-test:
    needs: prepare-cache
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - uses: actions/checkout@v2

      - name: Go cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.GO_CACHE }}
            ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-gocache-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Build
        run: make all

      - name: docker_e2e_test
        run: cd docker_e2e_test && make install-prerequisites-linux && make docker-e2e-tests

  # helloworld-tests tests the hello-world example, this indirectly ensures
  # that the autonity docker image can be built since the hello-world example
  # uses it. We don't want to use any cache here since we want a clean checkout
  # before any code generation has taken place.
  helloworld-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: helloworld
    steps:
      - uses: actions/checkout@v2

      - name: Build and start helloworld
        run: docker-compose up -d

      - name: Test helloworld console access
        run: |
          set -e && \
          for x in 11 12 13 14 15; do \
            docker run \
            --network helloworld_chainnet \
            --rm \
            autonity attach http://172.25.0.$x:8545 \
            --exec '[eth.coinbase, eth.getBlock("latest").number, eth.getBlock("latest").hash, eth.mining]'; \
          done

      - name: Stop helloworld
        run: docker-compose down

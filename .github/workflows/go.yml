name: Go
on: [push]
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Print go version
        run: go version

      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Cache modules
        uses: actions/cache@v1
        id: cache-autonity-go-modules
        with:
          path: /home/runner/go/pkg
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Fetch all modules
        if:  steps.cache-autonity-go-modules.outputs.cache-hit != 'true'
        run: go mod download -x

      - name: Build
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make autonity

  tests:
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
         go-version: 1.14.7

      - name: Print go version
        run: go version

      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v1
        with:
          path: /home/runner/go/pkg
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: unit tests
        run: go test -timeout 30m -short $(go list ./... | grep -v /consensus/tendermint)

  tests-tendermint:
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v1
        with:
          path: /home/runner/go/pkg
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: tendermint_tests
        run: go test -v ./consensus/tendermint/... -timeout 30m -cover -covermode=atomic -test.coverprofile=coverage_tendermint.out

      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.codecov_upload }}
          file: coverage_tendermint.out
          yml: codecov.yml

  linters:
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v1
        with:
          path: /home/runner/go/pkg
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Linters
        run: |
          git fetch -fu --no-tags --depth=2 origin develop:develop
          make lint-ci
        shell: bash

  tendermint_e2e_tests:
    needs: bootstrap
    runs-on: ubuntu-latest
    strategy:
      matrix:
        e2e: [TestCheckFeeRedirectionAndRedistribution,
              TestCheckBlockWithSmallFee,
              TestRemoveFromValidatorsList,
              TestContractUpgrade_Success,
              TestContractUpgradeSeveralUpgrades,
              TestContractUpgradeSeveralUpgradesOnBusTopology,
              TestContractUpgradeSeveralUpgradesOnStarTopology,
              TestTendermintSuccess,
              TestTendermintSlowConnections,
              TestTendermintMemoryLeak,
              TestTendermintLongRun,
              TestTendermintOneMalicious,
              TestTendermintNoQuorum,
              TestTendermintStopUpToFNodes,
              TestTendermintStartStopSingleNode,
              TestTendermintStartStopFNodes,
              TestTendermintStartStopFPlusOneNodes,
              TestTendermintStartStopFPlusTwoNodes,
              TestTendermintStartStopAllNodes,
              TestResolve,
              TestTendermintStarSuccess,
              TestTendermintStarOverParticipantSuccess,
              TestTendermintBusSuccess,
              TestTendermintChangeTopologyFromBusToStarSuccess,
              TestTendermintChangeTopologyFromStarToBusSuccess,
              TestTendermintAddConnectionToTopologySuccess,
              TestTendermintAddValidatorsToTopologySuccess,
              TestTendermintAddParticipantsToTopologySuccess,
              TestTendermintAddStakeholdersToTopologySuccess,
              TestTendermintExternalUser,
              TestTendermintStarOverParticipantSuccessWithExternalUser,
              TestTendermintBusSuccessWithExternalUser,
              TestTendermintChangeTopologyFromBusToStarSuccessWithExternalUser,
              TestTendermintChangeTopologyFromStarToBusSuccessWithExternalUser,
              TestTendermintAddConnectionToTopologySuccessWithExternalUser,
              TestTendermintAddValidatorsToTopologySuccessWithExternalUser,
              TestTendermintAddParticipantsToTopologySuccessWithExternalUser,
              TestTendermintAddStakeholdersToTopologySuccessWithExternalUser,
              TestTendermintMajorityExternalUsers,
              TestTendermintMajorityExternalUsersFullyConnected,
              TestAddStakeholderWithCorruptedEnodeToList,
              TestAddIncorrectStakeholdersToList
        ]

    name: Tendermint ${{ matrix.e2e }} test

    steps:

      - name: Set up Go
        uses: actions/setup-go@v1
        with:
         go-version: 1.14.7

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v1
        with:
          path: /home/runner/go/pkg
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Test
        run: go test ./consensus/test/... -v -run='${{ matrix.e2e }}' -timeout 40m

  race_tests:
    needs: bootstrap
    runs-on: ubuntu-latest
    env:
      GORACE: "history_size=7"
    steps:
      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v1
        with:
          path: /home/runner/go/pkg
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: unit
        run: go test -race -v ./consensus/tendermint/... -timeout 30m

  contract_tests:
    runs-on: ubuntu-latest
    needs: bootstrap
    steps:
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '9.x'

      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Build
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make autonity

      - name: test contract
        run: make test-contracts

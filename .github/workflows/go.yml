name: Go
on:
  push:
  workflow_dispatch:
  pull_request:
env:
  # We don't have access to the HOME environment variable here since we are not
  # inside a runner at this point, so we just have to hardcode '/home/runner',
  # if we instead defined these environment variables when we did have access
  # to HOME we would need to define them for each job, which would defeat the
  # purpose of defining them here.
  GO_CACHE: /home/runner/.cache/go-build
  GO_MODULES_CACHE: /home/runner/go/pkg
  AUTONITY_REPO_ROOT: /home/runner/work/autonity/autonity

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: Cache code
        uses: actions/cache@v2
        id: cache-autonity-code
        with:
          path: ./**
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Cache modules
        uses: actions/cache@v2
        id: cache-autonity-go-modules
        with:
          path: ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Fetch all modules
        if:  steps.cache-autonity-go-modules.outputs.cache-hit != 'true'
        run: go mod download -x

      - name: Go cache
        uses: actions/cache@v2
        with:
          path: ${{ env.GO_CACHE }}
          key: ${{ runner.os }}-autonity-go-cache-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Build
        #if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make autonity

  tests:
    needs: bootstrap
    runs-on: ubuntu-latest
    env:
      # helps prevent '[failed to restore the stack]' messages when race detected.
      GORACE: "history_size=7"
    strategy:
      matrix:
        # Here we set up a matrix to control our tests, we use go list and
        # negative grep to get most of the test packages for the main tests
        # excluding packages of particular interest. The excluded package are
        # those that are slow to test, our e2e tests and tendermint core.
        tests: [[Main tests, $(go list ./... | grep -E -v "/les|/p2p|/eth|/consensus/tendermint|/consensus/test")],
                [Slow tests, ./les/... ./p2p/... ./eth/...],
                [Tendermint core tests, ./consensus/tendermint/... -timeout 5m -race],
                [E2E tests, ./consensus/test/... -v -timeout 2h]]

    name: ${{ matrix.tests[0] }}

    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
      - name: Cache code
        uses: actions/cache@v2
        id: cache-autonity-code
        with:
          path: ./**
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v2
        with:
          path: ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Run tests
        run: go test ${{ matrix.tests[1] }}

  tendermint-coverage:
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: Cache code
        uses: actions/cache@v2
        id: cache-autonity-code
        with:
          path: ./**
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v2
        with:
          path: ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Run coverage
        run: go test ./consensus/tendermint/... -timeout 5m -cover -covermode=atomic -test.coverprofile=coverage_tendermint.out

      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.codecov_upload }}
          file: coverage_tendermint.out
          yml: codecov.yml

  linters:
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.15

      - name: Cache code
        uses: actions/cache@v2
        id: cache-autonity-code
        with:
          path: ./**
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v2
        with:
          path: ${{ env.GO_MODULES_CACHE }}
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Linters
        run: |
          git fetch -fu --no-tags --depth=2 origin develop:develop
          make lint-ci
        shell: bash

  contract_tests:
    runs-on: ubuntu-latest
    needs: bootstrap
    steps:
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.19.0'

      - name: Cache code
        uses: actions/cache@v2
        id: cache-autonity-code
        with:
          path: ./**
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Build
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make autonity

      - name: Build Autonity
        if:  steps.cache-autonity-bin.outputs.cache-hit != 'true'
        run: make autonity

      - name: test contract
        run: make test-contracts

  docker_e2e_test:
    needs: bootstrap
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Cache code
        uses: actions/cache@v2
        env:
          cache-name: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-aut-${{ env.cache-name }}-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'
        with:
          clean: 'false'


      - name: Build
        run: make all


      - name: docker_e2e_test
        run: cd docker_e2e_test && make install-prerequisites-linux && make docker-e2e-tests

  # Tests the hello-world example, this indirectly ensures that the autonity
  # docker image can be built since the hello-world example uses it.  We don't want to
  # use any cache here since we want a clean checkout before any code
  # generation has taken place.
  helloworld_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: helloworld
    steps:
      - uses: actions/checkout@v2

      - name: Build and start helloworld
        run: docker-compose up -d

      - name: Test helloworld console access
        run: |
          set -e && \
          for x in 11 12 13 14 15; do \
            docker run \
            --network helloworld_chainnet \
            --rm \
            autonity attach http://172.25.0.$x:8545 \
            --exec '[eth.coinbase, eth.getBlock("latest").number, eth.getBlock("latest").hash, eth.mining]'; \
          done

      - name: Stop helloworld
        run: docker-compose down

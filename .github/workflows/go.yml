name: Go
on: [push]
jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Print go version
        run: go version

      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Cache modules
        uses: actions/cache@v1
        id: cache-autonity-go-modules
        with:
          path: /home/runner/go/pkg
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Fetch all modules
        if:  steps.cache-autonity-go-modules.outputs.cache-hit != 'true'
        run: go mod download -x

      - name: Build
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make autonity

  tests:
    needs: bootstrap
    runs-on: ubuntu-latest
    env:
      # helps prevent '[failed to restore the stack]' messages when race detected.
      GORACE: "history_size=7"
    strategy:
      matrix:
        tests: []
        include:
          - tests: $(go list ./... | grep -E -v "/les|/p2p|/eth|/consensus/tendermint|/consensus/test")
            name: Main tests

          - tests: ./les/... ./p2p/... ./eth/...
            name: Slow tests

          - tests: ./consensus/test/...
            name: E2E tests

          - tests: ./consensus/tendermint/... -timeout 5m -race
            name: Tendermint core tests

    name: ${{ matrix.name }}

    steps:
      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v1
        with:
          path: /home/runner/go/pkg
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Run tests
        run: go test ${{ matrix.tests }}

  tendermint-coverage:
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v1
        with:
          path: /home/runner/go/pkg
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Run coverage
        run: go test ./consensus/tendermint/... -timeout 5m -cover -covermode=atomic -test.coverprofile=coverage_tendermint.out

      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.codecov_upload }}
          file: coverage_tendermint.out
          yml: codecov.yml

  linters:
    needs: bootstrap
    runs-on: ubuntu-latest
    steps:
      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Embed Autonity contract
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make embed-autonity-contract

      - name: Cache modules
        uses: actions/cache@v1
        with:
          path: /home/runner/go/pkg
          key: ${{ runner.os }}-autonity-go-modules-${{ hashFiles('go.mod', 'go.sum') }}

      - name: Linters
        run: |
          git fetch -fu --no-tags --depth=2 origin develop:develop
          make lint-ci
        shell: bash

  contract_tests:
    runs-on: ubuntu-latest
    needs: bootstrap
    steps:
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '9.x'

      - name: Cache code
        uses: actions/cache@v1
        id: cache-autonity-code
        with:
          path: /home/runner/work/autonity/autonity/
          key: ${{ runner.os }}-autonity-code-${{ github.sha }}

      - uses: actions/checkout@v2
        if: steps.cache-autonity-code.outputs.cache-hit != 'true'

      - name: Build
        if:  steps.cache-autonity-code.outputs.cache-hit != 'true'
        run: make autonity

      - name: test contract
        run: make test-contracts

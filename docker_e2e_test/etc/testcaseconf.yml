engineVersion: 3.0.1
playbook:
  name: "Example playbook of E2E testing of Autonity consensus."
  stop: false  # true to stop this playbook, false to keep this playbook be run by test engine.
  testcases:
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 1 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4] # select candidates from crashNodes.
      input:
        duration: 300 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
    - name: "Stop and Start F + 2 nodes, after recovery, engine should not on-holding"
      condition:
        crashNodes: [2, 3, 4, 5] # contain the node domain name we want to crash.
        scenario:
          - delay: 5 # seconds, stop the node after the test case running for 5 seconds.
            action: "stop"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
          - delay: 30 # seconds, start the node after the test case running for 60 seconds.
            action: "start"
            target: [2, 3, 4, 5] # select candidates from crashNodes.
      input:
        duration: 500 # num of seconds the transaction sending duration.
        senderNode: 1  # node coin_base address will be used as default sender address.
        receiverNode: 0  # node coin_base address wil be used as default receiver address.
        amountperTX: 10 # 10 tokens to be transfer per transaction.
      output:
        # In any case, engine should promise block consistent between nodes, and correct balance for each account.
        engineAlive: true # false means consensus engine should on-hold.
